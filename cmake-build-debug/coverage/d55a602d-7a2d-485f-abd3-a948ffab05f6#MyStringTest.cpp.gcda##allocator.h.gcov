        -:    0:Source:C:/PROGRA~1/MINGW-~1/X86_64~1.0-P/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/bits/allocator.h
        -:    0:Graph:F:\SoftwareProjects\CLionProjects\C++\My_String\cmake-build-debug\test\CMakeFiles\Boost_Tests_run.dir\MyStringTest.cpp.gcno
        -:    0:Data:F:\SoftwareProjects\CLionProjects\C++\My_String\cmake-build-debug\test\CMakeFiles\Boost_Tests_run.dir\MyStringTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Allocators -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2018 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: * Copyright (c) 1996-1997
        -:   27: * Silicon Graphics Computer Systems, Inc.
        -:   28: *
        -:   29: * Permission to use, copy, modify, distribute and sell this software
        -:   30: * and its documentation for any purpose is hereby granted without fee,
        -:   31: * provided that the above copyright notice appear in all copies and
        -:   32: * that both that copyright notice and this permission notice appear
        -:   33: * in supporting documentation.  Silicon Graphics makes no
        -:   34: * representations about the suitability of this software for any
        -:   35: * purpose.  It is provided "as is" without express or implied warranty.
        -:   36: */
        -:   37:
        -:   38:/** @file bits/allocator.h
        -:   39: *  This is an internal header file, included by other library headers.
        -:   40: *  Do not attempt to use it directly. @headername{memory}
        -:   41: */
        -:   42:
        -:   43:#ifndef _ALLOCATOR_H
        -:   44:#define _ALLOCATOR_H 1
        -:   45:
        -:   46:#include <bits/c++allocator.h> // Define the base class to std::allocator.
        -:   47:#include <bits/memoryfwd.h>
        -:   48:#if __cplusplus >= 201103L
        -:   49:#include <type_traits>
        -:   50:#endif
        -:   51:
        -:   52:#define __cpp_lib_incomplete_container_elements 201505
        -:   53:#if __cplusplus >= 201103L
        -:   54:# define __cpp_lib_allocator_is_always_equal 201411
        -:   55:#endif
        -:   56:
        -:   57:namespace std _GLIBCXX_VISIBILITY(default)
        -:   58:{
        -:   59:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   60:
        -:   61:  /**
        -:   62:   *  @addtogroup allocators
        -:   63:   *  @{
        -:   64:   */
        -:   65:
        -:   66:  /// allocator<void> specialization.
        -:   67:  template<>
        -:   68:    class allocator<void>
        -:   69:    {
        -:   70:    public:
        -:   71:      typedef size_t      size_type;
        -:   72:      typedef ptrdiff_t   difference_type;
        -:   73:      typedef void*       pointer;
        -:   74:      typedef const void* const_pointer;
        -:   75:      typedef void        value_type;
        -:   76:
        -:   77:      template<typename _Tp1>
        -:   78:	struct rebind
        -:   79:	{ typedef allocator<_Tp1> other; };
        -:   80:
        -:   81:#if __cplusplus >= 201103L
        -:   82:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   83:      // 2103. std::allocator propagate_on_container_move_assignment
        -:   84:      typedef true_type propagate_on_container_move_assignment;
        -:   85:
        -:   86:      typedef true_type is_always_equal;
        -:   87:
        -:   88:      template<typename _Up, typename... _Args>
        -:   89:	void
        -:   90:	construct(_Up* __p, _Args&&... __args)
        -:   91:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        -:   92:
        -:   93:      template<typename _Up>
        -:   94:	void
        -:   95:	destroy(_Up* __p) { __p->~_Up(); }
        -:   96:#endif
        -:   97:    };
        -:   98:
        -:   99:  /**
        -:  100:   * @brief  The @a standard allocator, as per [20.4].
        -:  101:   *
        -:  102:   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
        -:  103:   *  for further details.
        -:  104:   *
        -:  105:   *  @tparam  _Tp  Type of allocated object.
        -:  106:   */
        -:  107:  template<typename _Tp>
        -:  108:    class allocator : public __allocator_base<_Tp>
        -:  109:    {
        -:  110:   public:
        -:  111:      typedef size_t     size_type;
        -:  112:      typedef ptrdiff_t  difference_type;
        -:  113:      typedef _Tp*       pointer;
        -:  114:      typedef const _Tp* const_pointer;
        -:  115:      typedef _Tp&       reference;
        -:  116:      typedef const _Tp& const_reference;
        -:  117:      typedef _Tp        value_type;
        -:  118:
        -:  119:      template<typename _Tp1>
        -:  120:	struct rebind
        -:  121:	{ typedef allocator<_Tp1> other; };
        -:  122:
        -:  123:#if __cplusplus >= 201103L
        -:  124:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  125:      // 2103. std::allocator propagate_on_container_move_assignment
        -:  126:      typedef true_type propagate_on_container_move_assignment;
        -:  127:
        -:  128:      typedef true_type is_always_equal;
        -:  129:#endif
        -:  130:
    1300*:  131:      allocator() throw() { }
------------------
_ZNSaISt13_Rb_tree_nodeIPN5boost9unit_test13test_observerEEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_10shared_ptrINS1_7runtime8argumentEEEEEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeIPKN5boost7runtime16parameter_cla_idEEEC2Ev:
    #####:  131:      allocator() throw() { }
    %%%%%:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKcN5boost10shared_ptrINS2_7runtime3cla13rt_cla_detail14parameter_trieEEEEEEC2Ev:
      572:  131:      allocator() throw() { }
      572:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:
        2:  131:      allocator() throw() { }
        2:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC2Ev:
        2:  131:      allocator() throw() { }
        2:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKmN5boost9unit_test12test_resultsEEEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost16exception_detail10type_info_ENS1_10shared_ptrINS2_15error_info_baseEEEEEEC2Ev:
    #####:  131:      allocator() throw() { }
    %%%%%:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKmN5boost9unit_test9framework4impl10order_infoEEEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13output_formatENS2_14runtime_config13stream_holderEEEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeIPN5boost9unit_test14global_fixtureEEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_10shared_ptrINS1_7runtime11basic_paramEEEEEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKmPN5boost9unit_test9test_unitEEEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt10_List_nodeImEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKmN5boost9unit_test6output10junit_impl16junit_log_helperEEEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:
        2:  131:      allocator() throw() { }
        2:  131-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_9unit_test17test_unit_fixtureEEEEC1Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_9unit_test17test_unit_fixtureEEEEC2Ev:
       12:  131:      allocator() throw() { }
       12:  131-block  0
------------------
_ZNSaIN5boost9unit_test9framework4impl11name_filter9componentEEC1Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt4pairIKcPS0_EEC1Ev:
    #####:  131:      allocator() throw() { }
    %%%%%:  131-block  0
------------------
_ZNSaISt6vectorIN5boost10shared_ptrINS0_9unit_test9decorator4baseEEESaIS5_EEEC1Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt4pairIN5boost10shared_ptrINS0_9unit_test19test_unit_generatorEEESt6vectorINS1_INS2_9decorator4baseEEESaIS8_EEEEC2Ev:
        2:  131:      allocator() throw() { }
        2:  131-block  0
------------------
_ZNSaIN5boost8functionIFNS_10test_tools16assertion_resultEmEEEEC2Ev:
       12:  131:      allocator() throw() { }
       12:  131-block  0
------------------
_ZNSaISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_12report_levelEEEC1Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_9log_levelEEEC1Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_13output_formatEEEC1Ev:
        4:  131:      allocator() throw() { }
        4:  131-block  0
------------------
_ZNSaISt4pairIPKcPKN5boost9unit_test12lazy_ostreamEEEC2Ev:
    #####:  131:      allocator() throw() { }
    %%%%%:  131-block  0
------------------
_ZNSaIN5boost9unit_test13basic_cstringIKcEEEC2Ev:
        6:  131:      allocator() throw() { }
        6:  131-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_7runtime3cla13rt_cla_detail14parameter_trieEEEEC2Ev:
       10:  131:      allocator() throw() { }
       10:  131-block  0
------------------
_ZNSaIN5boost17reference_wrapperIKNS_7runtime16parameter_cla_idEEEEC2Ev:
      572:  131:      allocator() throw() { }
      572:  131-block  0
------------------
_ZNSaIN5boost9unit_test12_GLOBAL__N_130unit_test_log_data_helper_implEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaIN5boost7runtime16parameter_cla_idEEC2Ev:
       28:  131:      allocator() throw() { }
       28:  131-block  0
------------------
_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev:
        2:  131:      allocator() throw() { }
        2:  131-block  0
------------------
_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
       13:  131:      allocator() throw() { }
       13:  131-block  0
------------------
_ZNSaIN5boost9unit_test9framework5state13context_frameEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaIPN5boost9unit_test10test_suiteEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt6vectorIN5boost9unit_test9framework4impl11name_filter9componentESaIS5_EEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaImEC2Ev:
       27:  131:      allocator() throw() { }
       27:  131-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_9unit_test9decorator4baseEEEEC2Ev:
       13:  131:      allocator() throw() { }
       13:  131-block  0
------------------
_ZNSaIN5boost9unit_test6output10junit_impl16junit_log_helper15assertion_entryEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_10shared_ptrINS1_7runtime3cla13rt_cla_detail14parameter_trieEEEEEEC2Ev:
        1:  131:      allocator() throw() { }
        1:  131-block  0
------------------
        -:  132:
      98*:  133:      allocator(const allocator& __a) throw()
      98*:  134:      : __allocator_base<_Tp>(__a) { }
------------------
_ZNSaIN5boost7runtime16parameter_cla_idEEC2ERKS2_:
       28:  133:      allocator(const allocator& __a) throw()
       28:  134:      : __allocator_base<_Tp>(__a) { }
       28:  134-block  0
------------------
_ZNSaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_:
    #####:  133:      allocator(const allocator& __a) throw()
    #####:  134:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  134-block  0
------------------
_ZNSaISt4pairIKcPS0_EEC1ERKS3_:
    #####:  133:      allocator(const allocator& __a) throw()
    #####:  134:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  134-block  0
------------------
_ZNSaISt13_Rb_tree_nodeIPN5boost9unit_test14global_fixtureEEEC1ERKS5_:
        1:  133:      allocator(const allocator& __a) throw()
        1:  134:      : __allocator_base<_Tp>(__a) { }
        1:  134-block  0
------------------
_ZNSaISt13_Rb_tree_nodeIPN5boost9unit_test13test_observerEEEC1ERKS5_:
        1:  133:      allocator(const allocator& __a) throw()
        1:  134:      : __allocator_base<_Tp>(__a) { }
        1:  134-block  0
------------------
_ZNSaIN5boost9unit_test13basic_cstringIKcEEEC2ERKS4_:
        6:  133:      allocator(const allocator& __a) throw()
        6:  134:      : __allocator_base<_Tp>(__a) { }
        6:  134-block  0
------------------
_ZNSaIN5boost9unit_test13basic_cstringIKcEEEC1ERKS4_:
        6:  133:      allocator(const allocator& __a) throw()
        6:  134:      : __allocator_base<_Tp>(__a) { }
        6:  134-block  0
------------------
_ZNSaISt6vectorIN5boost10shared_ptrINS0_9unit_test9decorator4baseEEESaIS5_EEEC2ERKS8_:
        1:  133:      allocator(const allocator& __a) throw()
        1:  134:      : __allocator_base<_Tp>(__a) { }
        1:  134-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKcPS1_EEEC2ERKS5_:
    #####:  133:      allocator(const allocator& __a) throw()
    #####:  134:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  134-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_9unit_test9decorator4baseEEEEC2ERKS5_:
    #####:  133:      allocator(const allocator& __a) throw()
    #####:  134:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  134-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_9unit_test9decorator4baseEEEEC1ERKS5_:
    #####:  133:      allocator(const allocator& __a) throw()
    #####:  134:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  134-block  0
------------------
_ZNSaIN5boost9unit_test9framework4impl11name_filter9componentEEC2ERKS5_:
        2:  133:      allocator(const allocator& __a) throw()
        2:  134:      : __allocator_base<_Tp>(__a) { }
        2:  134-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_9unit_test17test_unit_fixtureEEEEC2ERKS4_:
        1:  133:      allocator(const allocator& __a) throw()
        1:  134:      : __allocator_base<_Tp>(__a) { }
        1:  134-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_12report_levelEEEEC1ERKSA_:
        1:  133:      allocator(const allocator& __a) throw()
        1:  134:      : __allocator_base<_Tp>(__a) { }
        1:  134-block  0
------------------
_ZNSaIN5boost7runtime16parameter_cla_idEEC1ERKS2_:
       28:  133:      allocator(const allocator& __a) throw()
       28:  134:      : __allocator_base<_Tp>(__a) { }
       28:  134-block  0
------------------
_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS5_:
        4:  133:      allocator(const allocator& __a) throw()
        4:  134:      : __allocator_base<_Tp>(__a) { }
        4:  134-block  0
------------------
_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_:
        2:  133:      allocator(const allocator& __a) throw()
        2:  134:      : __allocator_base<_Tp>(__a) { }
        2:  134-block  0
------------------
_ZNSaIN5boost9unit_test6output10junit_impl16junit_log_helper15assertion_entryEEC2ERKS5_:
    #####:  133:      allocator(const allocator& __a) throw()
    #####:  134:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  134-block  0
------------------
_ZNSaISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_13output_formatEEEC1ERKS8_:
        4:  133:      allocator(const allocator& __a) throw()
        4:  134:      : __allocator_base<_Tp>(__a) { }
        4:  134-block  0
------------------
_ZNSaISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_9log_levelEEEC1ERKS8_:
        1:  133:      allocator(const allocator& __a) throw()
        1:  134:      : __allocator_base<_Tp>(__a) { }
        1:  134-block  0
------------------
_ZNSaISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_12report_levelEEEC1ERKS8_:
        1:  133:      allocator(const allocator& __a) throw()
        1:  134:      : __allocator_base<_Tp>(__a) { }
        1:  134-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_13output_formatEEEEC2ERKSA_:
        4:  133:      allocator(const allocator& __a) throw()
        4:  134:      : __allocator_base<_Tp>(__a) { }
        4:  134-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_13output_formatEEEEC1ERKSA_:
        4:  133:      allocator(const allocator& __a) throw()
        4:  134:      : __allocator_base<_Tp>(__a) { }
        4:  134-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_9log_levelEEEEC2ERKSA_:
        1:  133:      allocator(const allocator& __a) throw()
        1:  134:      : __allocator_base<_Tp>(__a) { }
        1:  134-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_9log_levelEEEEC1ERKSA_:
        1:  133:      allocator(const allocator& __a) throw()
        1:  134:      : __allocator_base<_Tp>(__a) { }
        1:  134-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_12report_levelEEEEC2ERKSA_:
        1:  133:      allocator(const allocator& __a) throw()
        1:  134:      : __allocator_base<_Tp>(__a) { }
        1:  134-block  0
------------------
        -:  135:
        -:  136:      template<typename _Tp1>
       6*:  137:	allocator(const allocator<_Tp1>&) throw() { }
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_12report_levelEEEEC1IS8_EERKSaIT_E:
        1:  137:	allocator(const allocator<_Tp1>&) throw() { }
        1:  137-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_9log_levelEEEEC1IS8_EERKSaIT_E:
        1:  137:	allocator(const allocator<_Tp1>&) throw() { }
        1:  137-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_13output_formatEEEEC1IS8_EERKSaIT_E:
        4:  137:	allocator(const allocator<_Tp1>&) throw() { }
        4:  137-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKcPS1_EEEC1IS3_EERKSaIT_E:
    #####:  137:	allocator(const allocator<_Tp1>&) throw() { }
    %%%%%:  137-block  0
------------------
        -:  138:
    1286*:  139:      ~allocator() throw() { }
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKmN5boost9unit_test9framework4impl10order_infoEEEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_9unit_test9decorator4baseEEEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKcPS1_EEED1Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKcPS1_EEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_10shared_ptrINS1_7runtime11basic_paramEEEEEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_10shared_ptrINS1_7runtime8argumentEEEEEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeIPKN5boost7runtime16parameter_cla_idEEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKcN5boost10shared_ptrINS2_7runtime3cla13rt_cla_detail14parameter_trieEEEEEED2Ev:
      572:  139:      ~allocator() throw() { }
      572:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
        2:  139:      ~allocator() throw() { }
        2:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKmN5boost9unit_test12test_resultsEEEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost16exception_detail10type_info_ENS1_10shared_ptrINS2_15error_info_baseEEEEEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_9unit_test17test_unit_fixtureEEEED1Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_9unit_test17test_unit_fixtureEEEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_9unit_test9decorator4baseEEEED1Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13output_formatENS2_14runtime_config13stream_holderEEEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeIPN5boost9unit_test14global_fixtureEEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeIPN5boost9unit_test13test_observerEEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKmPN5boost9unit_test9test_unitEEEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaIN5boost9unit_test9framework4impl11name_filter9componentEED1Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaIN5boost9unit_test9framework4impl11name_filter9componentEED2Ev:
        2:  139:      ~allocator() throw() { }
        2:  139-block  0
------------------
_ZNSaISt4pairIKcPS0_EED1Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt10_List_nodeImEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKmN5boost9unit_test6output10junit_impl16junit_log_helperEEEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
        2:  139:      ~allocator() throw() { }
        2:  139-block  0
------------------
_ZNSaISt6vectorIN5boost10shared_ptrINS0_9unit_test9decorator4baseEEESaIS5_EEED1Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaISt6vectorIN5boost10shared_ptrINS0_9unit_test9decorator4baseEEESaIS5_EEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaIPN5boost9unit_test10test_suiteEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_9log_levelEEED1Ev:
        2:  139:      ~allocator() throw() { }
        2:  139-block  0
------------------
_ZNSaISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_13output_formatEEED1Ev:
        8:  139:      ~allocator() throw() { }
        8:  139-block  0
------------------
_ZNSaISt4pairIPKcPKN5boost9unit_test12lazy_ostreamEEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_12report_levelEEEED1Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_12report_levelEEEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_9log_levelEEEED1Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_9log_levelEEEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_13output_formatEEEED1Ev:
        4:  139:      ~allocator() throw() { }
        4:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS2_13output_formatEEEED2Ev:
        4:  139:      ~allocator() throw() { }
        4:  139-block  0
------------------
_ZNSaIN5boost10shared_ptrINS_7runtime3cla13rt_cla_detail14parameter_trieEEEED2Ev:
       10:  139:      ~allocator() throw() { }
       10:  139-block  0
------------------
_ZNSaIN5boost17reference_wrapperIKNS_7runtime16parameter_cla_idEEEED2Ev:
      572:  139:      ~allocator() throw() { }
      572:  139-block  0
------------------
_ZNSaIN5boost9unit_test12_GLOBAL__N_130unit_test_log_data_helper_implEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaIN5boost9unit_test9framework5state13context_frameEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_12report_levelEEED1Ev:
        2:  139:      ~allocator() throw() { }
        2:  139-block  0
------------------
_ZNSaISt6vectorIN5boost9unit_test9framework4impl11name_filter9componentESaIS5_EEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaIN5boost9unit_test6output10junit_impl16junit_log_helper15assertion_entryEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaISt4pairIN5boost10shared_ptrINS0_9unit_test19test_unit_generatorEEESt6vectorINS1_INS2_9decorator4baseEEESaIS8_EEEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaIN5boost8functionIFNS_10test_tools16assertion_resultEmEEEED2Ev:
    #####:  139:      ~allocator() throw() { }
    %%%%%:  139-block  0
------------------
_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev:
        4:  139:      ~allocator() throw() { }
        4:  139-block  0
------------------
_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
        3:  139:      ~allocator() throw() { }
        3:  139-block  0
------------------
_ZNSaImED2Ev:
       13:  139:      ~allocator() throw() { }
       13:  139-block  0
------------------
_ZNSaIN5boost9unit_test13basic_cstringIKcEEED1Ev:
        6:  139:      ~allocator() throw() { }
        6:  139-block  0
------------------
_ZNSaIN5boost9unit_test13basic_cstringIKcEEED2Ev:
        6:  139:      ~allocator() throw() { }
        6:  139-block  0
------------------
_ZNSaISt13_Rb_tree_nodeISt4pairIKN5boost9unit_test13basic_cstringIKcEENS1_10shared_ptrINS1_7runtime3cla13rt_cla_detail14parameter_trieEEEEEED2Ev:
        1:  139:      ~allocator() throw() { }
        1:  139-block  0
------------------
_ZNSaIN5boost7runtime16parameter_cla_idEED1Ev:
       28:  139:      ~allocator() throw() { }
       28:  139-block  0
------------------
_ZNSaIN5boost7runtime16parameter_cla_idEED2Ev:
       28:  139:      ~allocator() throw() { }
       28:  139-block  0
------------------
        -:  140:
        -:  141:      // Inherit everything else.
        -:  142:    };
        -:  143:
        -:  144:  template<typename _T1, typename _T2>
        -:  145:    inline bool
        -:  146:    operator==(const allocator<_T1>&, const allocator<_T2>&)
        -:  147:    _GLIBCXX_USE_NOEXCEPT
        -:  148:    { return true; }
        -:  149:
        -:  150:  template<typename _Tp>
        -:  151:    inline bool
        -:  152:    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
        -:  153:    _GLIBCXX_USE_NOEXCEPT
        -:  154:    { return true; }
        -:  155:
        -:  156:  template<typename _T1, typename _T2>
        -:  157:    inline bool
        -:  158:    operator!=(const allocator<_T1>&, const allocator<_T2>&)
        -:  159:    _GLIBCXX_USE_NOEXCEPT
        -:  160:    { return false; }
        -:  161:
        -:  162:  template<typename _Tp>
        -:  163:    inline bool
    #####:  164:    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
        -:  165:    _GLIBCXX_USE_NOEXCEPT
    #####:  166:    { return false; }
    %%%%%:  166-block  0
        -:  167:
        -:  168:  // Invalid allocator<cv T> partial specializations.
        -:  169:  // allocator_traits::rebind_alloc can be used to form a valid allocator type.
        -:  170:  template<typename _Tp>
        -:  171:    class allocator<const _Tp>
        -:  172:    {
        -:  173:    public:
        -:  174:      typedef _Tp value_type;
        -:  175:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  176:    };
        -:  177:
        -:  178:  template<typename _Tp>
        -:  179:    class allocator<volatile _Tp>
        -:  180:    {
        -:  181:    public:
        -:  182:      typedef _Tp value_type;
        -:  183:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  184:    };
        -:  185:
        -:  186:  template<typename _Tp>
        -:  187:    class allocator<const volatile _Tp>
        -:  188:    {
        -:  189:    public:
        -:  190:      typedef _Tp value_type;
        -:  191:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  192:    };
        -:  193:
        -:  194:  /// @} group allocator
        -:  195:
        -:  196:  // Inhibit implicit instantiations for required instantiations,
        -:  197:  // which are defined via explicit instantiations elsewhere.
        -:  198:#if _GLIBCXX_EXTERN_TEMPLATE
        -:  199:  extern template class allocator<char>;
        -:  200:  extern template class allocator<wchar_t>;
        -:  201:#endif
        -:  202:
        -:  203:  // Undefine.
        -:  204:#undef __allocator_base
        -:  205:
        -:  206:  // To implement Option 3 of DR 431.
        -:  207:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  208:    struct __alloc_swap
        -:  209:    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };
        -:  210:
        -:  211:  template<typename _Alloc>
        -:  212:    struct __alloc_swap<_Alloc, false>
        -:  213:    {
        -:  214:      static void
        -:  215:      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT
        -:  216:      {
        -:  217:	// Precondition: swappable allocators.
        -:  218:	if (__one != __two)
        -:  219:	  swap(__one, __two);
        -:  220:      }
        -:  221:    };
        -:  222:
        -:  223:  // Optimize for stateless allocators.
        -:  224:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  225:    struct __alloc_neq
        -:  226:    {
        -:  227:      static bool
        -:  228:      _S_do_it(const _Alloc&, const _Alloc&)
        -:  229:      { return false; }
        -:  230:    };
        -:  231:
        -:  232:  template<typename _Alloc>
        -:  233:    struct __alloc_neq<_Alloc, false>
        -:  234:    {
        -:  235:      static bool
        -:  236:      _S_do_it(const _Alloc& __one, const _Alloc& __two)
        -:  237:      { return __one != __two; }
        -:  238:    };
        -:  239:
        -:  240:#if __cplusplus >= 201103L
        -:  241:  template<typename _Tp, bool
        -:  242:    = __or_<is_copy_constructible<typename _Tp::value_type>,
        -:  243:            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
        -:  244:    struct __shrink_to_fit_aux
        -:  245:    { static bool _S_do_it(_Tp&) noexcept { return false; } };
        -:  246:
        -:  247:  template<typename _Tp>
        -:  248:    struct __shrink_to_fit_aux<_Tp, true>
        -:  249:    {
        -:  250:      static bool
        -:  251:      _S_do_it(_Tp& __c) noexcept
        -:  252:      {
        -:  253:#if __cpp_exceptions
        -:  254:	try
        -:  255:	  {
        -:  256:	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
        -:  257:		__make_move_if_noexcept_iterator(__c.end()),
        -:  258:		__c.get_allocator()).swap(__c);
        -:  259:	    return true;
        -:  260:	  }
        -:  261:	catch(...)
        -:  262:	  { return false; }
        -:  263:#else
        -:  264:	return false;
        -:  265:#endif
        -:  266:      }
        -:  267:    };
        -:  268:#endif
        -:  269:
        -:  270:_GLIBCXX_END_NAMESPACE_VERSION
        -:  271:} // namespace std
        -:  272:
        -:  273:#endif
