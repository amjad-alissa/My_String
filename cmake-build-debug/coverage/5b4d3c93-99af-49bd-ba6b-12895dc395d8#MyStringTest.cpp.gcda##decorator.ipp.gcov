        -:    0:Source:F:/Files/vcpkg/installed/x86-windows/include/boost/test/impl/decorator.ipp
        -:    0:Graph:F:\SoftwareProjects\CLionProjects\C++\My_String\cmake-build-debug\test\CMakeFiles\Boost_Tests_run.dir\MyStringTest.cpp.gcno
        -:    0:Data:F:\SoftwareProjects\CLionProjects\C++\My_String\cmake-build-debug\test\CMakeFiles\Boost_Tests_run.dir\MyStringTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://  (C) Copyright Gennadiy Rozental 2001.
        -:    2://  Distributed under the Boost Software License, Version 1.0.
        -:    3://  (See accompanying file LICENSE_1_0.txt or copy at
        -:    4://  http://www.boost.org/LICENSE_1_0.txt)
        -:    5:
        -:    6://  See http://www.boost.org/libs/test for the library home page.
        -:    7://
        -:    8://  Description : unit test decorators implementation
        -:    9:// ***************************************************************************
        -:   10:
        -:   11:#ifndef BOOST_TEST_TREE_DECORATOR_IPP_091911GER
        -:   12:#define BOOST_TEST_TREE_DECORATOR_IPP_091911GER
        -:   13:
        -:   14:// Boost.Test
        -:   15:#include <boost/test/tree/decorator.hpp>
        -:   16:#include <boost/test/tree/test_unit.hpp>
        -:   17:
        -:   18:#include <boost/test/framework.hpp>
        -:   19:#if BOOST_TEST_SUPPORT_TOKEN_ITERATOR
        -:   20:#include <boost/test/utils/iterator/token_iterator.hpp>
        -:   21:#endif
        -:   22:
        -:   23:#include <boost/test/detail/throw_exception.hpp>
        -:   24:
        -:   25:#include <boost/test/detail/suppress_warnings.hpp>
        -:   26:
        -:   27://____________________________________________________________________________//
        -:   28:
        -:   29:namespace boost {
        -:   30:namespace unit_test {
        -:   31:namespace decorator {
        -:   32:
        -:   33:// ************************************************************************** //
        -:   34:// **************             decorator::collector_t           ************** //
        -:   35:// ************************************************************************** //
        -:   36:
        -:   37:// singleton pattern
       11:   38:BOOST_TEST_SINGLETON_CONS_IMPL(collector_t)
       11:   38-block  0
        1:   38-block  1
        1:   38-block  2
        1:   38-block  3
       11:   38-block  4
       11:   38-block  5
    $$$$$:   38-block  6
    $$$$$:   38-block  7
        -:   39:
        -:   40:
        -:   41:collector_t&
    #####:   42:collector_t::operator*( base const& d )
        -:   43:{
    #####:   44:    m_tu_decorators_stack.begin()->push_back( d.clone() );
    %%%%%:   44-block  0
    %%%%%:   44-block  1
    %%%%%:   44-block  2
    $$$$$:   44-block  3
    $$$$$:   44-block  4
        -:   45:
    #####:   46:    return *this;
    %%%%%:   46-block  0
        -:   47:}
        -:   48:
        -:   49://____________________________________________________________________________//
        -:   50:
        -:   51:void
       11:   52:collector_t::store_in( test_unit& tu )
        -:   53:{
        -:   54:    tu.p_decorators.value.insert(
       11:   55:        tu.p_decorators.value.end(),
    $$$$$:   55-block  0
       11:   56:        m_tu_decorators_stack.begin()->begin(),
    $$$$$:   56-block  0
       33:   57:        m_tu_decorators_stack.begin()->end() );
       11:   57-block  0
    $$$$$:   57-block  1
       11:   58:}
       11:   58-block  0
        -:   59:
        -:   60://____________________________________________________________________________//
        -:   61:
        -:   62:void
       11:   63:collector_t::reset()
        -:   64:{
       11:   65:    if(m_tu_decorators_stack.size() > 1) {
       11:   65-block  0
    #####:   66:        m_tu_decorators_stack.erase(m_tu_decorators_stack.begin());
    %%%%%:   66-block  0
    %%%%%:   66-block  1
    $$$$$:   66-block  2
        -:   67:    }
        -:   68:    else {
      11*:   69:        assert(m_tu_decorators_stack.size() == 1);
       11:   69-block  0
    %%%%%:   69-block  1
       11:   69-block  2
       11:   70:        m_tu_decorators_stack.begin()->clear();
       11:   70-block  0
        -:   71:    }
       11:   72:}
       11:   72-block  0
        -:   73:
        -:   74:void
    #####:   75:collector_t::stack()
        -:   76:{
    #####:   77:    assert(m_tu_decorators_stack.size() >= 1);
    %%%%%:   77-block  0
    %%%%%:   77-block  1
    %%%%%:   77-block  2
    #####:   78:    m_tu_decorators_stack.insert(m_tu_decorators_stack.begin(), std::vector<base_ptr>());
    %%%%%:   78-block  0
    %%%%%:   78-block  1
    $$$$$:   78-block  2
    $$$$$:   78-block  3
    $$$$$:   78-block  4
    #####:   79:}
        -:   80:
        -:   81://____________________________________________________________________________//
        -:   82:
        -:   83:std::vector<base_ptr>
    #####:   84:collector_t::get_lazy_decorators() const
        -:   85:{
    #####:   86:    return *m_tu_decorators_stack.begin();
    %%%%%:   86-block  0
    %%%%%:   86-block  1
    %%%%%:   86-block  2
    %%%%%:   86-block  3
        -:   87:}
        -:   88:
        -:   89://____________________________________________________________________________//
        -:   90:
        -:   91:// ************************************************************************** //
        -:   92:// **************               decorator::base                ************** //
        -:   93:// ************************************************************************** //
        -:   94:
        -:   95:collector_t&
    #####:   96:base::operator*() const
        -:   97:{
    #####:   98:    return collector_t::instance() * *this;
    %%%%%:   98-block  0
        -:   99:}
        -:  100:
        -:  101:// ************************************************************************** //
        -:  102:// **************           decorator::stack_decorator         ************** //
        -:  103:// ************************************************************************** //
        -:  104:
        -:  105:collector_t&
    #####:  106:stack_decorator::operator*() const
        -:  107:{
    #####:  108:    collector_t& instance = collector_t::instance();
    %%%%%:  108-block  0
    #####:  109:    instance.stack();
    #####:  110:    return instance * *this;
        -:  111:}
        -:  112:
        -:  113:void
    #####:  114:stack_decorator::apply( test_unit& /*tu*/ )
        -:  115:{
        -:  116:    // does nothing by definition
    #####:  117:}
        -:  118:
        -:  119:// ************************************************************************** //
        -:  120:// **************               decorator::label               ************** //
        -:  121:// ************************************************************************** //
        -:  122:
        -:  123:void
    #####:  124:label::apply( test_unit& tu )
        -:  125:{
    #####:  126:    tu.add_label( m_label );
    %%%%%:  126-block  0
    #####:  127:}
    %%%%%:  127-block  0
        -:  128:
        -:  129://____________________________________________________________________________//
        -:  130:
        -:  131:// ************************************************************************** //
        -:  132:// **************         decorator::expected_failures         ************** //
        -:  133:// ************************************************************************** //
        -:  134:
        -:  135:void
    #####:  136:expected_failures::apply( test_unit& tu )
        -:  137:{
    #####:  138:    tu.increase_exp_fail( m_exp_fail );
    %%%%%:  138-block  0
    #####:  139:}
        -:  140:
        -:  141://____________________________________________________________________________//
        -:  142:
        -:  143:// ************************************************************************** //
        -:  144:// **************              decorator::timeout              ************** //
        -:  145:// ************************************************************************** //
        -:  146:
        -:  147:void
    #####:  148:timeout::apply( test_unit& tu )
        -:  149:{
    #####:  150:    tu.p_timeout.value = m_timeout;
    #####:  151:}
        -:  152:
        -:  153://____________________________________________________________________________//
        -:  154:
        -:  155:// ************************************************************************** //
        -:  156:// **************            decorator::description            ************** //
        -:  157:// ************************************************************************** //
        -:  158:
        -:  159:void
    #####:  160:description::apply( test_unit& tu )
        -:  161:{
    #####:  162:    tu.p_description.value += m_description;
    %%%%%:  162-block  0
    #####:  163:}
        -:  164:
        -:  165://____________________________________________________________________________//
        -:  166:
        -:  167:// ************************************************************************** //
        -:  168:// **************             decorator::depends_on            ************** //
        -:  169:// ************************************************************************** //
        -:  170:
        -:  171:void
    #####:  172:depends_on::apply( test_unit& tu )
        -:  173:{
        -:  174:#if !BOOST_TEST_SUPPORT_TOKEN_ITERATOR
        -:  175:    BOOST_TEST_SETUP_ASSERT( false, "depends_on decorator is not supported on this platform" );
        -:  176:#else
    #####:  177:    utils::string_token_iterator tit( m_dependency, (utils::dropped_delimeters = "/", utils::kept_delimeters = utils::dt_none) );
    %%%%%:  177-block  0
    %%%%%:  177-block  1
    %%%%%:  177-block  2
    %%%%%:  177-block  3
    $$$$$:  177-block  4
    $$$$$:  177-block  5
    $$$$$:  177-block  6
    $$$$$:  177-block  7
    $$$$$:  177-block  8
        -:  178:
    #####:  179:    test_unit* dep = &framework::master_test_suite();
    %%%%%:  179-block  0
    %%%%%:  179-block  1
    %%%%%:  179-block  2
    %%%%%:  179-block  3
    %%%%%:  179-block  4
    #####:  180:    while( tit != utils::string_token_iterator() ) {
    %%%%%:  180-block  0
    %%%%%:  180-block  1
    %%%%%:  180-block  2
    %%%%%:  180-block  3
    $$$$$:  180-block  4
    #####:  181:        BOOST_TEST_SETUP_ASSERT( dep->p_type == TUT_SUITE, std::string( "incorrect dependency specification " ) + m_dependency );
    %%%%%:  181-block  0
    %%%%%:  181-block  1
    %%%%%:  181-block  2
    %%%%%:  181-block  3
    %%%%%:  181-block  4
    $$$$$:  181-block  5
    $$$$$:  181-block  6
    $$$$$:  181-block  7
    $$$$$:  181-block  8
    $$$$$:  181-block  9
    $$$$$:  181-block 10
    $$$$$:  181-block 11
    $$$$$:  181-block 12
    $$$$$:  181-block 13
        -:  182:
    #####:  183:        test_unit_id next_id = static_cast<test_suite*>(dep)->get( *tit );
    %%%%%:  183-block  0
    %%%%%:  183-block  1
    %%%%%:  183-block  2
    %%%%%:  183-block  3
    %%%%%:  183-block  4
    $$$$$:  183-block  5
        -:  184:
    #####:  185:        BOOST_TEST_SETUP_ASSERT( next_id != INV_TEST_UNIT_ID,
    %%%%%:  185-block  0
    %%%%%:  185-block  1
    %%%%%:  185-block  2
    %%%%%:  185-block  3
    %%%%%:  185-block  4
    $$$$$:  185-block  5
    $$$$$:  185-block  6
    $$$$$:  185-block  7
    $$$$$:  185-block  8
    $$$$$:  185-block  9
    $$$$$:  185-block 10
    $$$$$:  185-block 11
    $$$$$:  185-block 12
    $$$$$:  185-block 13
        -:  186:                                 std::string( "incorrect dependency specification " ) + m_dependency );
        -:  187:
    #####:  188:        dep = &framework::get( next_id, TUT_ANY );
    %%%%%:  188-block  0
    #####:  189:        ++tit;
    %%%%%:  189-block  0
        -:  190:    }
        -:  191:
    #####:  192:    tu.depends_on( dep );
    %%%%%:  192-block  0
        -:  193:#endif
    #####:  194:}
    %%%%%:  194-block  0
        -:  195:
        -:  196://____________________________________________________________________________//
        -:  197:
        -:  198:// ************************************************************************** //
        -:  199:// **************    decorator::enable_if/enabled/disabled     ************** //
        -:  200:// ************************************************************************** //
        -:  201:
        -:  202:void
    #####:  203:enable_if_impl::apply_impl( test_unit& tu, bool condition )
        -:  204:{
    #####:  205:    BOOST_TEST_SETUP_ASSERT(tu.p_default_status == test_unit::RS_INHERIT,
    %%%%%:  205-block  0
    %%%%%:  205-block  1
    %%%%%:  205-block  2
    %%%%%:  205-block  3
    %%%%%:  205-block  4
    $$$$$:  205-block  5
    $$$$$:  205-block  6
    $$$$$:  205-block  7
    $$$$$:  205-block  8
    $$$$$:  205-block  9
    $$$$$:  205-block 10
    $$$$$:  205-block 11
        -:  206:                            "Can't apply multiple enabled/disabled decorators "
        -:  207:                            "to the same test unit " + tu.full_name());
        -:  208:
    #####:  209:    tu.p_default_status.value = condition ? test_unit::RS_ENABLED : test_unit::RS_DISABLED;
    %%%%%:  209-block  0
    %%%%%:  209-block  1
    %%%%%:  209-block  2
    #####:  210:}
    %%%%%:  210-block  0
        -:  211:
        -:  212://____________________________________________________________________________//
        -:  213:
        -:  214:// ************************************************************************** //
        -:  215:// **************              decorator::fixture              ************** //
        -:  216:// ************************************************************************** //
        -:  217:
        -:  218:void
    #####:  219:fixture_t::apply( test_unit& tu )
        -:  220:{
    #####:  221:    tu.p_fixtures.value.push_back( m_impl );
    %%%%%:  221-block  0
    #####:  222:}
        -:  223:
        -:  224://____________________________________________________________________________//
        -:  225:
        -:  226:// ************************************************************************** //
        -:  227:// **************            decorator::depends_on             ************** //
        -:  228:// ************************************************************************** //
        -:  229:
        -:  230:void
    #####:  231:precondition::apply( test_unit& tu )
        -:  232:{
    #####:  233:    tu.add_precondition( m_precondition );
    %%%%%:  233-block  0
    #####:  234:}
        -:  235:
        -:  236://____________________________________________________________________________//
        -:  237:
        -:  238:} // namespace decorator
        -:  239:} // namespace unit_test
        -:  240:} // namespace boost
        -:  241:
        -:  242:#include <boost/test/detail/enable_warnings.hpp>
        -:  243:
        -:  244:#endif // BOOST_TEST_TREE_DECORATOR_IPP_091911GER
