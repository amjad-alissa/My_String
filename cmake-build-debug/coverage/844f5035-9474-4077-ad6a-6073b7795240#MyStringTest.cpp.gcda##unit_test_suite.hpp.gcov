        -:    0:Source:F:/Files/vcpkg/installed/x86-windows/include/boost/test/unit_test_suite.hpp
        -:    0:Graph:F:\SoftwareProjects\CLionProjects\C++\My_String\cmake-build-debug\test\CMakeFiles\Boost_Tests_run.dir\MyStringTest.cpp.gcno
        -:    0:Data:F:\SoftwareProjects\CLionProjects\C++\My_String\cmake-build-debug\test\CMakeFiles\Boost_Tests_run.dir\MyStringTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://  (C) Copyright Gennadiy Rozental 2001.
        -:    2://  Distributed under the Boost Software License, Version 1.0.
        -:    3://  (See accompanying file LICENSE_1_0.txt or copy at
        -:    4://  http://www.boost.org/LICENSE_1_0.txt)
        -:    5:
        -:    6://  See http://www.boost.org/libs/test for the library home page.
        -:    7://
        -:    8:/// @file
        -:    9:/// @brief Defines Unit Test Framework public API
        -:   10:// ***************************************************************************
        -:   11:
        -:   12:#ifndef BOOST_TEST_UNIT_TEST_SUITE_HPP_071894GER
        -:   13:#define BOOST_TEST_UNIT_TEST_SUITE_HPP_071894GER
        -:   14:
        -:   15:// Boost.Test
        -:   16:#include <boost/test/framework.hpp>
        -:   17:#include <boost/test/tree/auto_registration.hpp>
        -:   18:#include <boost/test/tree/test_case_template.hpp>
        -:   19:#include <boost/test/tree/global_fixture.hpp>
        -:   20:
        -:   21:
        -:   22:#include <boost/test/detail/suppress_warnings.hpp>
        -:   23:
        -:   24:
        -:   25:#include <boost/test/detail/pp_variadic.hpp>
        -:   26:
        -:   27:
        -:   28:
        -:   29://____________________________________________________________________________//
        -:   30:
        -:   31:// ************************************************************************** //
        -:   32:// **************    Non-auto (explicit) test case interface   ************** //
        -:   33:// ************************************************************************** //
        -:   34:
        -:   35:#define BOOST_TEST_CASE_NAME( test_function, test_name )                   \
        -:   36:boost::unit_test::make_test_case( boost::function<void ()>(test_function), \
        -:   37:                                  test_name ,                              \
        -:   38:                                  __FILE__, __LINE__ )
        -:   39:#define BOOST_TEST_CASE( test_function )                                   \
        -:   40:BOOST_TEST_CASE_NAME(test_function, BOOST_TEST_STRINGIZE( test_function) )
        -:   41:#define BOOST_CLASS_TEST_CASE( test_function, tc_instance )                \
        -:   42:boost::unit_test::make_test_case( (test_function),                         \
        -:   43:                                  BOOST_TEST_STRINGIZE( test_function ),   \
        -:   44:                                  __FILE__, __LINE__, tc_instance )
        -:   45:
        -:   46:// ************************************************************************** //
        -:   47:// **************               BOOST_TEST_SUITE               ************** //
        -:   48:// ************************************************************************** //
        -:   49:
        -:   50:#define BOOST_TEST_SUITE( testsuite_name ) \
        -:   51:( new boost::unit_test::test_suite( testsuite_name, __FILE__, __LINE__ ) )
        -:   52:
        -:   53:// ************************************************************************** //
        -:   54:// **************             BOOST_AUTO_TEST_SUITE            ************** //
        -:   55:// ************************************************************************** //
        -:   56:
        -:   57:#define BOOST_AUTO_TEST_SUITE_WITH_DECOR( suite_name, decorators )      \
        -:   58:namespace suite_name {                                                  \
        -:   59:BOOST_AUTO_TU_REGISTRAR( suite_name )(                                  \
        -:   60:    BOOST_STRINGIZE( suite_name ),                                      \
        -:   61:    __FILE__, __LINE__,                                                 \
        -:   62:    decorators );                                                       \
        -:   63:/**/
        -:   64:
        -:   65:#define BOOST_AUTO_TEST_SUITE_NO_DECOR( suite_name )                    \
        -:   66:    BOOST_AUTO_TEST_SUITE_WITH_DECOR(                                   \
        -:   67:        suite_name,                                                     \
        -:   68:        boost::unit_test::decorator::collector_t::instance() )          \
        -:   69:/**/
        -:   70:
        -:   71:#if BOOST_PP_VARIADICS
        -:   72:#define BOOST_AUTO_TEST_SUITE( ... )                                    \
        -:   73:    BOOST_TEST_INVOKE_IF_N_ARGS( 1,                                     \
        -:   74:        BOOST_AUTO_TEST_SUITE_NO_DECOR,                                 \
        -:   75:        BOOST_AUTO_TEST_SUITE_WITH_DECOR,                               \
        -:   76:        __VA_ARGS__)                                                    \
        -:   77:/**/
        -:   78:
        -:   79:#else /* BOOST_PP_VARIADICS */
        -:   80:
        -:   81:#define BOOST_AUTO_TEST_SUITE( suite_name )                             \
        -:   82:    BOOST_AUTO_TEST_SUITE_NO_DECOR( suite_name )                        \
        -:   83:/**/
        -:   84:
        -:   85:
        -:   86:#endif /* BOOST_PP_VARIADICS */
        -:   87:
        -:   88:// ************************************************************************** //
        -:   89:// **************            BOOST_FIXTURE_TEST_SUITE          ************** //
        -:   90:// ************************************************************************** //
        -:   91:
        -:   92:#define BOOST_FIXTURE_TEST_SUITE_WITH_DECOR(suite_name, F, decorators)  \
        -:   93:    BOOST_AUTO_TEST_SUITE_WITH_DECOR( suite_name, decorators )          \
        -:   94:typedef F BOOST_AUTO_TEST_CASE_FIXTURE;                                 \
        -:   95:/**/
        -:   96:
        -:   97:#define BOOST_FIXTURE_TEST_SUITE_NO_DECOR( suite_name, F )              \
        -:   98:    BOOST_AUTO_TEST_SUITE_NO_DECOR( suite_name )                        \
        -:   99:typedef F BOOST_AUTO_TEST_CASE_FIXTURE;                                 \
        -:  100:/**/
        -:  101:
        -:  102:#if BOOST_PP_VARIADICS
        -:  103:
        -:  104:#define BOOST_FIXTURE_TEST_SUITE( ... )                                 \
        -:  105:    BOOST_TEST_INVOKE_IF_N_ARGS( 2,                                     \
        -:  106:        BOOST_FIXTURE_TEST_SUITE_NO_DECOR,                              \
        -:  107:        BOOST_FIXTURE_TEST_SUITE_WITH_DECOR,                            \
        -:  108:        __VA_ARGS__)                                                    \
        -:  109:/**/
        -:  110:
        -:  111:#else /* BOOST_PP_VARIADICS */
        -:  112:
        -:  113:#define BOOST_FIXTURE_TEST_SUITE( suite_name, F  )                      \
        -:  114:   BOOST_FIXTURE_TEST_SUITE_NO_DECOR( suite_name, F )                   \
        -:  115:/**/
        -:  116:
        -:  117:
        -:  118:#endif /* BOOST_PP_VARIADICS */
        -:  119:
        -:  120:
        -:  121:// ************************************************************************** //
        -:  122:// **************           BOOST_AUTO_TEST_SUITE_END          ************** //
        -:  123:// ************************************************************************** //
        -:  124:
        -:  125:#define BOOST_AUTO_TEST_SUITE_END()             \
        -:  126:BOOST_AUTO_TU_REGISTRAR( end_suite )( 1 );      \
        -:  127:}                                               \
        -:  128:/**/
        -:  129:
        -:  130:// ************************************************************************** //
        -:  131:// **************    BOOST_AUTO_TEST_CASE_EXPECTED_FAILURES    ************** //
        -:  132:// ************************************************************************** //
        -:  133:
        -:  134:/// @deprecated use decorator instead
        -:  135:#define BOOST_AUTO_TEST_CASE_EXPECTED_FAILURES( test_name, n )          \
        -:  136:BOOST_TEST_DECORATOR( * boost::unit_test::expected_failures( n ) )      \
        -:  137:/**/
        -:  138:
        -:  139:// ************************************************************************** //
        -:  140:// **************            BOOST_FIXTURE_TEST_CASE           ************** //
        -:  141:// ************************************************************************** //
        -:  142:
        -:  143:#define BOOST_FIXTURE_TEST_CASE_WITH_DECOR( test_name, F, decorators )  \
        -:  144:struct test_name : public F { void test_method(); };                    \
        -:  145:                                                                        \
        -:  146:static void BOOST_AUTO_TC_INVOKER( test_name )()                        \
        -:  147:{                                                                       \
        -:  148:    BOOST_TEST_CHECKPOINT('"' << #test_name << "\" fixture ctor");      \
        -:  149:    test_name t;                                                        \
        -:  150:    BOOST_TEST_CHECKPOINT('"' << #test_name << "\" fixture setup");     \
        -:  151:    boost::unit_test::setup_conditional(t);                             \
        -:  152:    BOOST_TEST_CHECKPOINT('"' << #test_name << "\" test entry");        \
        -:  153:    t.test_method();                                                    \
        -:  154:    BOOST_TEST_CHECKPOINT('"' << #test_name << "\" fixture teardown");  \
        -:  155:    boost::unit_test::teardown_conditional(t);                          \
        -:  156:    BOOST_TEST_CHECKPOINT('"' << #test_name << "\" fixture dtor");      \
        -:  157:}                                                                       \
        -:  158:                                                                        \
        -:  159:struct BOOST_AUTO_TC_UNIQUE_ID( test_name ) {};                         \
        -:  160:                                                                        \
        -:  161:BOOST_AUTO_TU_REGISTRAR( test_name )(                                   \
        -:  162:    boost::unit_test::make_test_case(                                   \
        -:  163:        &BOOST_AUTO_TC_INVOKER( test_name ),                            \
        -:  164:        #test_name, __FILE__, __LINE__ ),                               \
        -:  165:        decorators );                                                   \
        -:  166:                                                                        \
        -:  167:void test_name::test_method()                                           \
        -:  168:/**/
        -:  169:
        -:  170:#define BOOST_FIXTURE_TEST_CASE_NO_DECOR( test_name, F )                \
        -:  171:BOOST_FIXTURE_TEST_CASE_WITH_DECOR( test_name, F,                       \
        -:  172:    boost::unit_test::decorator::collector_t::instance() )              \
        -:  173:/**/
        -:  174:
        -:  175:#if BOOST_PP_VARIADICS
        -:  176:
        -:  177:#define BOOST_FIXTURE_TEST_CASE( ... )                                  \
        -:  178:    BOOST_TEST_INVOKE_IF_N_ARGS( 2,                                     \
        -:  179:        BOOST_FIXTURE_TEST_CASE_NO_DECOR,                               \
        -:  180:        BOOST_FIXTURE_TEST_CASE_WITH_DECOR,                             \
        -:  181:         __VA_ARGS__)                                                   \
        -:  182:/**/
        -:  183:
        -:  184:#else /* BOOST_PP_VARIADICS */
        -:  185:
        -:  186:#define BOOST_FIXTURE_TEST_CASE( test_name, F )                         \
        -:  187:     BOOST_FIXTURE_TEST_CASE_NO_DECOR(test_name, F)                     \
        -:  188:/**/
        -:  189:
        -:  190:
        -:  191:#endif /* BOOST_PP_VARIADICS */
        -:  192:
        -:  193:// ************************************************************************** //
        -:  194:// **************             BOOST_AUTO_TEST_CASE             ************** //
        -:  195:// ************************************************************************** //
        -:  196:
        -:  197:#define BOOST_AUTO_TEST_CASE_NO_DECOR( test_name )                      \
        -:  198:    BOOST_FIXTURE_TEST_CASE_NO_DECOR( test_name,                        \
        -:  199:        BOOST_AUTO_TEST_CASE_FIXTURE )                                  \
        -:  200:/**/
        -:  201:
        -:  202:#define BOOST_AUTO_TEST_CASE_WITH_DECOR( test_name, decorators )        \
        -:  203:    BOOST_FIXTURE_TEST_CASE_WITH_DECOR( test_name,                      \
        -:  204:        BOOST_AUTO_TEST_CASE_FIXTURE, decorators )                      \
        -:  205:/**/
        -:  206:
        -:  207:#if BOOST_PP_VARIADICS
        -:  208:
        -:  209:#define BOOST_AUTO_TEST_CASE( ... )                                     \
        -:  210:    BOOST_TEST_INVOKE_IF_N_ARGS( 1,                                     \
        -:  211:        BOOST_AUTO_TEST_CASE_NO_DECOR,                                  \
        -:  212:        BOOST_AUTO_TEST_CASE_WITH_DECOR,                                \
        -:  213:         __VA_ARGS__)                                                   \
        -:  214:/**/
        -:  215:
        -:  216:#else /* BOOST_PP_VARIADICS */
        -:  217:
        -:  218:#define BOOST_AUTO_TEST_CASE( test_name )                               \
        -:  219:    BOOST_AUTO_TEST_CASE_NO_DECOR( test_name )                          \
        -:  220:/**/
        -:  221:
        -:  222:
        -:  223:#endif /* BOOST_PP_VARIADICS */
        -:  224:
        -:  225:// ************************************************************************** //
        -:  226:// **************       BOOST_FIXTURE_TEST_CASE_TEMPLATE       ************** //
        -:  227:// ************************************************************************** //
        -:  228:
        -:  229:#define BOOST_FIXTURE_TEST_CASE_TEMPLATE( test_name, type_name, TL, F ) \
        -:  230:template<typename type_name>                                            \
        -:  231:struct test_name : public F                                             \
        -:  232:{ void test_method(); };                                                \
        -:  233:                                                                        \
        -:  234:struct BOOST_AUTO_TC_INVOKER( test_name ) {                             \
        -:  235:    template<typename TestType>                                         \
        -:  236:    static void run( boost::type<TestType>* = 0 )                       \
        -:  237:    {                                                                   \
        -:  238:        BOOST_TEST_CHECKPOINT('"' << #test_name << "\" fixture ctor");  \
        -:  239:        test_name<TestType> t;                                          \
        -:  240:        BOOST_TEST_CHECKPOINT('"' << #test_name << "\" fixture setup"); \
        -:  241:        boost::unit_test::setup_conditional(t);                         \
        -:  242:        BOOST_TEST_CHECKPOINT('"' << #test_name << "\" test entry");    \
        -:  243:        t.test_method();                                                \
        -:  244:        BOOST_TEST_CHECKPOINT('"' << #test_name << "\" fixture teardown");\
        -:  245:        boost::unit_test::teardown_conditional(t);                      \
        -:  246:        BOOST_TEST_CHECKPOINT('"' << #test_name << "\" fixture dtor");  \
        -:  247:    }                                                                   \
        -:  248:};                                                                      \
        -:  249:                                                                        \
        -:  250:BOOST_AUTO_TU_REGISTRAR( test_name )(                                   \
        -:  251:    boost::unit_test::ut_detail::template_test_case_gen<                \
        -:  252:        BOOST_AUTO_TC_INVOKER( test_name ),TL >(                        \
        -:  253:          BOOST_STRINGIZE( test_name ), __FILE__, __LINE__ ),           \
        -:  254:    boost::unit_test::decorator::collector_t::instance() );             \
        -:  255:                                                                        \
        -:  256:template<typename type_name>                                            \
        -:  257:void test_name<type_name>::test_method()                                \
        -:  258:/**/
        -:  259:
        -:  260:// ************************************************************************** //
        -:  261:// **************        BOOST_AUTO_TEST_CASE_TEMPLATE         ************** //
        -:  262:// ************************************************************************** //
        -:  263:
        -:  264:#define BOOST_AUTO_TEST_CASE_TEMPLATE( test_name, type_name, TL )       \
        -:  265:BOOST_FIXTURE_TEST_CASE_TEMPLATE( test_name, type_name, TL,             \
        -:  266:    BOOST_AUTO_TEST_CASE_FIXTURE )                                      \
        -:  267:/**/
        -:  268:
        -:  269:// ************************************************************************** //
        -:  270:// **************           BOOST_TEST_CASE_TEMPLATE           ************** //
        -:  271:// ************************************************************************** //
        -:  272:
        -:  273:#define BOOST_TEST_CASE_TEMPLATE( name, typelist )                      \
        -:  274:    boost::unit_test::ut_detail::template_test_case_gen<name,typelist>( \
        -:  275:        BOOST_TEST_STRINGIZE( name ), __FILE__, __LINE__ )              \
        -:  276:/**/
        -:  277:
        -:  278:// ************************************************************************** //
        -:  279:// **************      BOOST_TEST_CASE_TEMPLATE_FUNCTION       ************** //
        -:  280:// ************************************************************************** //
        -:  281:
        -:  282:#define BOOST_TEST_CASE_TEMPLATE_FUNCTION( name, type_name )            \
        -:  283:template<typename type_name>                                            \
        -:  284:void BOOST_JOIN( name, _impl )( boost::type<type_name>* );              \
        -:  285:                                                                        \
        -:  286:struct name {                                                           \
        -:  287:    template<typename TestType>                                         \
        -:  288:    static void run( boost::type<TestType>* frwrd = 0 )                 \
        -:  289:    {                                                                   \
        -:  290:       BOOST_JOIN( name, _impl )( frwrd );                              \
        -:  291:    }                                                                   \
        -:  292:};                                                                      \
        -:  293:                                                                        \
        -:  294:template<typename type_name>                                            \
        -:  295:void BOOST_JOIN( name, _impl )( boost::type<type_name>* )               \
        -:  296:/**/
        -:  297:
        -:  298:// ************************************************************************** //
        -:  299:// **************              BOOST_GLOBAL_FIXTURE            ************** //
        -:  300:// ************************************************************************** //
        -:  301:
        -:  302:#define BOOST_GLOBAL_FIXTURE( F ) \
        -:  303:static boost::unit_test::ut_detail::global_configuration_impl<F> BOOST_JOIN( gf_, F ) \
        -:  304:/**/
        -:  305:
        -:  306:// ************************************************************************** //
        -:  307:// **************      BOOST_TEST_GLOBAL_CONFIGURATION         ************** //
        -:  308:// ************************************************************************** //
        -:  309:
        -:  310:#define BOOST_TEST_GLOBAL_CONFIGURATION( F ) \
        -:  311:static boost::unit_test::ut_detail::global_configuration_impl<F> BOOST_JOIN( gf_, F ) \
        -:  312:/**/
        -:  313:
        -:  314:// ************************************************************************** //
        -:  315:// **************         BOOST_TEST_GLOBAL_FIXTURE            ************** //
        -:  316:// ************************************************************************** //
        -:  317:
        -:  318:#define BOOST_TEST_GLOBAL_FIXTURE( F ) \
        -:  319:static boost::unit_test::ut_detail::global_fixture_impl<F> BOOST_JOIN( gf_, F ) \
        -:  320:/**/
        -:  321:
        -:  322:// ************************************************************************** //
        -:  323:// **************             BOOST_TEST_DECORATOR             ************** //
        -:  324:// ************************************************************************** //
        -:  325:
        -:  326:#define BOOST_TEST_DECORATOR( D )                                       \
        -:  327:static boost::unit_test::decorator::collector_t const&                  \
        -:  328:BOOST_TEST_APPEND_UNIQUE_ID(decorator_collector) BOOST_ATTRIBUTE_UNUSED = D; \
        -:  329:/**/
        -:  330:
        -:  331:// ************************************************************************** //
        -:  332:// **************         BOOST_AUTO_TEST_CASE_FIXTURE         ************** //
        -:  333:// ************************************************************************** //
        -:  334:
        -:  335:namespace boost { namespace unit_test { namespace ut_detail {
        -:  336:
        -:  337:struct nil_t {};
        -:  338:
        -:  339:} // namespace ut_detail
        -:  340:} // unit_test
        -:  341:} // namespace boost
        -:  342:
        -:  343:// Intentionally is in global namespace, so that FIXTURE_TEST_SUITE can reset it in user code.
        -:  344:typedef ::boost::unit_test::ut_detail::nil_t BOOST_AUTO_TEST_CASE_FIXTURE;
        -:  345:
        -:  346:// ************************************************************************** //
        -:  347:// **************   Auto registration facility helper macros   ************** //
        -:  348:// ************************************************************************** //
        -:  349:
        -:  350:// Facility for having a unique name based on __LINE__ and __COUNTER__ (later if available)
        -:  351:#if defined(__COUNTER__)
        -:  352:  #define BOOST_TEST_INTERNAL_HAS_COUNTER
        -:  353:#endif
        -:  354:
        -:  355:#if defined(BOOST_TEST_INTERNAL_HAS_COUNTER)
        -:  356:  #define BOOST_TEST_APPEND_UNIQUE_ID( name ) \
        -:  357:  BOOST_JOIN( BOOST_JOIN( name, __LINE__ ), __COUNTER__)
        -:  358:  /**/
        -:  359:#else
        -:  360:  #define BOOST_TEST_APPEND_UNIQUE_ID( name ) \
        -:  361:  BOOST_JOIN( name, __LINE__ )
        -:  362:  /**/
        -:  363:#endif
        -:  364:/**/
        -:  365:
        -:  366:#define BOOST_AUTO_TU_REGISTRAR( test_name )                       \
        -:  367:static boost::unit_test::ut_detail::auto_test_unit_registrar       \
        -:  368:BOOST_TEST_APPEND_UNIQUE_ID( BOOST_JOIN( test_name, _registrar ) ) BOOST_ATTRIBUTE_UNUSED \
        -:  369:/**/
        -:  370:#define BOOST_AUTO_TC_INVOKER( test_name )      BOOST_JOIN( test_name, _invoker )
        -:  371:#define BOOST_AUTO_TC_UNIQUE_ID( test_name )    BOOST_JOIN( test_name, _id )
        -:  372:
        -:  373:// ************************************************************************** //
        -:  374:// **************                BOOST_TEST_MAIN               ************** //
        -:  375:// ************************************************************************** //
        -:  376:
        -:  377:#if defined(BOOST_TEST_MAIN)
        -:  378:
        -:  379:// initializing the master test suite name from the user defined macros
        -:  380:// this function should be seen exactly once.
        -:  381:#ifdef BOOST_TEST_MODULE
        -:  382:static const boost::unit_test::framework::impl::master_test_suite_name_setter mtsetter(BOOST_TEST_STRINGIZE( BOOST_TEST_MODULE ).trim( "\"" ));
        -:  383:#endif
        -:  384:
        -:  385:#ifdef BOOST_TEST_ALTERNATIVE_INIT_API
        -:  386:bool init_unit_test()                   {
        -:  387:#else
        -:  388:::boost::unit_test::test_suite*
        1:  389:init_unit_test_suite( int, char* [] )   {
        -:  390:#endif
        -:  391:
        -:  392:#ifdef BOOST_TEST_ALTERNATIVE_INIT_API
        -:  393:    return true;
        -:  394:}
        -:  395:#else
        1:  396:    return 0;
        1:  396-block  0
        -:  397:}
        -:  398:#endif
        -:  399:
        -:  400:#endif
        -:  401:
        -:  402://____________________________________________________________________________//
        -:  403:
        -:  404:#include <boost/test/detail/enable_warnings.hpp>
        -:  405:
        -:  406:
        -:  407:#endif // BOOST_TEST_UNIT_TEST_SUITE_HPP_071894GER
        -:  408:
