        -:    0:Source:F:/Files/vcpkg/installed/x86-windows/include/boost/test/utils/basic_cstring/basic_cstring.hpp
        -:    0:Graph:F:\SoftwareProjects\CLionProjects\C++\My_String\cmake-build-debug\test\CMakeFiles\Boost_Tests_run.dir\MyStringTest.cpp.gcno
        -:    0:Data:F:\SoftwareProjects\CLionProjects\C++\My_String\cmake-build-debug\test\CMakeFiles\Boost_Tests_run.dir\MyStringTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://  (C) Copyright Gennadiy Rozental 2001.
        -:    2://  Distributed under the Boost Software License, Version 1.0.
        -:    3://  (See accompanying file LICENSE_1_0.txt or copy at
        -:    4://  http://www.boost.org/LICENSE_1_0.txt)
        -:    5:
        -:    6://  See http://www.boost.org/libs/test for the library home page.
        -:    7://
        -:    8://  File        : $RCSfile$
        -:    9://
        -:   10://  Version     : $Revision$
        -:   11://
        -:   12://  Description : class basic_cstring wraps C string and provide std_string like
        -:   13://                interface
        -:   14:// ***************************************************************************
        -:   15:
        -:   16:#ifndef BOOST_TEST_UTILS_BASIC_CSTRING_HPP
        -:   17:#define BOOST_TEST_UTILS_BASIC_CSTRING_HPP
        -:   18:
        -:   19:// Boost.Test
        -:   20:#include <boost/test/utils/basic_cstring/basic_cstring_fwd.hpp>
        -:   21:#include <boost/test/utils/basic_cstring/bcs_char_traits.hpp>
        -:   22:
        -:   23:// Boost
        -:   24:#include <boost/type_traits/remove_cv.hpp>
        -:   25:
        -:   26:// STL
        -:   27:#include <string>
        -:   28:
        -:   29:#include <boost/test/detail/suppress_warnings.hpp>
        -:   30:
        -:   31://____________________________________________________________________________//
        -:   32:
        -:   33:namespace boost {
        -:   34:
        -:   35:namespace unit_test {
        -:   36:
        -:   37:// ************************************************************************** //
        -:   38:// **************                basic_cstring                 ************** //
        -:   39:// ************************************************************************** //
        -:   40:
        -:   41:template<typename CharT>
        -:   42:class BOOST_SYMBOL_VISIBLE basic_cstring {
        -:   43:    typedef basic_cstring<CharT>                        self_type;
        -:   44:public:
        -:   45:    // Subtypes
        -:   46:    typedef ut_detail::bcs_char_traits<CharT>           traits_type;
        -:   47:    typedef typename traits_type::std_string            std_string;
        -:   48:
        -:   49:    typedef CharT                                       value_type;
        -:   50:    typedef typename remove_cv<value_type>::type        value_ret_type;
        -:   51:    typedef value_type*                                 pointer;
        -:   52:    typedef value_type const*                           const_pointer;
        -:   53:    typedef value_type&                                 reference;
        -:   54:    typedef const value_type&                           const_reference;
        -:   55:    typedef std::size_t                                 size_type;
        -:   56:    typedef std::ptrdiff_t                              difference_type;
        -:   57:
        -:   58:    typedef value_type const*                           const_iterator;
        -:   59:    typedef value_type*                                 iterator;
        -:   60:
        -:   61:    // !! should also present reverse_iterator, const_reverse_iterator
        -:   62:
        -:   63:#if !BOOST_WORKAROUND(__IBMCPP__, BOOST_TESTED_AT(600)) && !defined(__DCC__)
        -:   64:    BOOST_STATIC_CONSTANT(size_type, npos = static_cast<size_type>(-1));
        -:   65:#else
        -:   66:    // IBM/VisualAge version 6 is not able to handle enums larger than 4 bytes.
        -:   67:    // But size_type is 8 bytes in 64bit mode.
        -:   68:    static const size_type npos = -1 ;
        -:   69:#endif
        -:   70:
        -:   71:    static pointer  null_str();
        -:   72:
        -:   73:    // Constructors; default copy constructor is generated by compiler
        -:   74:    basic_cstring();
        -:   75:    basic_cstring( basic_cstring const & );
        -:   76:    basic_cstring( std_string const& s );
        -:   77:    basic_cstring( pointer s );
        -:   78:    template<typename LenType>
      318:   79:    basic_cstring( pointer s, LenType len ) : m_begin( s ), m_end( m_begin + len ) {}
------------------
_ZN5boost9unit_test13basic_cstringIKcEC1IiEEPS2_T_:
      146:   79:    basic_cstring( pointer s, LenType len ) : m_begin( s ), m_end( m_begin + len ) {}
------------------
_ZN5boost9unit_test13basic_cstringIKcEC1IyEEPS2_T_:
      172:   79:    basic_cstring( pointer s, LenType len ) : m_begin( s ), m_end( m_begin + len ) {}
------------------
        -:   80:    basic_cstring( pointer first, pointer last );
        -:   81:
        -:   82:    // data access methods
        -:   83:    value_ret_type  operator[]( size_type index ) const;
        -:   84:    value_ret_type  at( size_type index ) const;
        -:   85:
        -:   86:    // size operators
        -:   87:    size_type       size() const;
        -:   88:    bool            is_empty() const;
        -:   89:    void            clear();
        -:   90:    void            resize( size_type new_len );
        -:   91:
        -:   92:    // !! only for STL container conformance use is_empty instead
        -:   93:    bool            empty() const;
        -:   94:
        -:   95:    // Trimming
        -:   96:    self_type&      trim_right( size_type trim_size );
        -:   97:    self_type&      trim_left( size_type trim_size );
        -:   98:    self_type&      trim_right( iterator it );
        -:   99:    self_type&      trim_left( iterator it );
        -:  100:#if !BOOST_WORKAROUND(__IBMCPP__, BOOST_TESTED_AT(800))
        -:  101:    self_type&      trim_left( self_type exclusions = self_type() ) ;
        -:  102:    self_type&      trim_right( self_type exclusions = self_type() ) ;
        -:  103:    self_type&      trim( self_type exclusions = self_type() ) ;
        -:  104:#else
        -:  105:    // VA C++/XL C++ v6 and v8 has in this case a problem with the default arguments.
        -:  106:    self_type&      trim_left( self_type exclusions );
        -:  107:    self_type&      trim_right( self_type exclusions );
        -:  108:    self_type&      trim( self_type exclusions );
        -:  109:    self_type&      trim_left()     { return trim_left( self_type() ); }
        -:  110:    self_type&      trim_right()    { return trim_right( self_type() ); }
        -:  111:    self_type&      trim()          { return trim( self_type() ); }
        -:  112:#endif
        -:  113:
        -:  114:    // Assignment operators
        -:  115:    basic_cstring&  operator=( self_type const& s );
        -:  116:    basic_cstring&  operator=( std_string const& s );
        -:  117:    basic_cstring&  operator=( pointer s );
        -:  118:
        -:  119:    template<typename CharT2>
        -:  120:    basic_cstring&  assign( basic_cstring<CharT2> const& s )
        -:  121:    {
        -:  122:        return *this = basic_cstring<CharT>( s.begin(), s.end() );
        -:  123:    }
        -:  124:    template<typename PosType, typename LenType>
        -:  125:    basic_cstring&  assign( self_type const& s, PosType pos, LenType len )
        -:  126:    {
        -:  127:        return *this = self_type( s.m_begin + pos, len );
        -:  128:    }
        -:  129:
        -:  130:    basic_cstring&  assign( std_string const& s );
        -:  131:    template<typename PosType, typename LenType>
        -:  132:    basic_cstring&  assign( std_string const& s, PosType pos, LenType len )
        -:  133:    {
        -:  134:        return *this = self_type( s.c_str() + pos, len );
        -:  135:    }
        -:  136:    basic_cstring&  assign( pointer s );
        -:  137:    template<typename LenType>
        -:  138:    basic_cstring&  assign( pointer s, LenType len )
        -:  139:    {
        -:  140:        return *this = self_type( s, len );
        -:  141:    }
        -:  142:    basic_cstring&  assign( pointer f, pointer l );
        -:  143:
        -:  144:    // swapping
        -:  145:    void            swap( self_type& s );
        -:  146:
        -:  147:    // Iterators
        -:  148:    iterator        begin();
        -:  149:    const_iterator  begin() const;
        -:  150:    iterator        end();
        -:  151:    const_iterator  end() const;
        -:  152:
        -:  153:    // !! should have rbegin, rend
        -:  154:
        -:  155:    // substring search operation
        -:  156:    size_type       find( basic_cstring ) const;
        -:  157:    size_type       rfind( basic_cstring ) const;
        -:  158:    self_type       substr( size_type beg_index, size_type end_index = npos ) const;
        -:  159:
        -:  160:private:
        -:  161:    static self_type default_trim_ex();
        -:  162:
        -:  163:    // Data members
        -:  164:    iterator        m_begin;
        -:  165:    iterator        m_end;
        -:  166:    static CharT null;
        -:  167:};
        -:  168:
        -:  169://____________________________________________________________________________//
        -:  170:
        -:  171:template<typename CharT>
        -:  172:CharT basic_cstring<CharT>::null = 0;
        -:  173:
        -:  174://____________________________________________________________________________//
        -:  175:
        -:  176:template<typename CharT>
        -:  177:inline typename basic_cstring<CharT>::pointer
      264:  178:basic_cstring<CharT>::null_str()
        -:  179:{
      264:  180:    return &null;
      264:  180-block  0
        -:  181:}
        -:  182:
        -:  183://____________________________________________________________________________//
        -:  184:
        -:  185:template<typename CharT>
        -:  186:inline
      244:  187:basic_cstring<CharT>::basic_cstring()
      244:  188:: m_begin( null_str() )
      244:  188-block  0
      244:  189:, m_end( m_begin )
        -:  190:{
      244:  191:}
        -:  192:
        -:  193://____________________________________________________________________________//
        -:  194:
        -:  195:template<typename CharT>
        -:  196:inline
     2582:  197:basic_cstring<CharT>::basic_cstring(basic_cstring const & s)
     2582:  198:: m_begin( s.m_begin )
     2582:  199:, m_end( s.m_end )
        -:  200:{
     2582:  201:}
        -:  202:
        -:  203://____________________________________________________________________________//
        -:  204:
        -:  205:template<typename CharT>
        -:  206:inline
      533:  207:basic_cstring<CharT>::basic_cstring( std_string const& s )
        -:  208:: m_begin( s.c_str() )
      533:  209:, m_end( m_begin + s.size() )
      533:  209-block  0
        -:  210:{
      533:  211:}
        -:  212:
        -:  213://____________________________________________________________________________//
        -:  214:
        -:  215:template<typename CharT>
        -:  216:inline
      593:  217:basic_cstring<CharT>::basic_cstring( pointer s )
      593:  218:: m_begin( s ? s : null_str() )
      593:  218-block  0
       20:  218-block  1
      573:  218-block  2
      593:  219:, m_end  ( m_begin + (s ? traits_type::length( s ) : 0 ) )
      593:  219-block  0
      573:  219-block  1
       20:  219-block  2
        -:  220:{
      593:  221:}
        -:  222:
        -:  223://____________________________________________________________________________//
        -:  224:
        -:  225:template<typename CharT>
        -:  226:inline
       37:  227:basic_cstring<CharT>::basic_cstring( pointer first, pointer last )
        -:  228:: m_begin( first )
       37:  229:, m_end( last )
        -:  230:{
       37:  231:}
        -:  232:
        -:  233://____________________________________________________________________________//
        -:  234:
        -:  235:template<typename CharT>
        -:  236:inline typename basic_cstring<CharT>::value_ret_type
       14:  237:basic_cstring<CharT>::operator[]( size_type index ) const
        -:  238:{
       14:  239:    return m_begin[index];
       14:  239-block  0
        -:  240:}
        -:  241:
        -:  242://____________________________________________________________________________//
        -:  243:
        -:  244:template<typename CharT>
        -:  245:inline typename basic_cstring<CharT>::value_ret_type
        -:  246:basic_cstring<CharT>::at( size_type index ) const
        -:  247:{
        -:  248:    if( m_begin + index >= m_end )
        -:  249:        return static_cast<value_type>(0);
        -:  250:
        -:  251:    return m_begin[index];
        -:  252:}
        -:  253:
        -:  254://____________________________________________________________________________//
        -:  255:
        -:  256:template<typename CharT>
        -:  257:inline typename basic_cstring<CharT>::size_type
     5768:  258:basic_cstring<CharT>::size() const
        -:  259:{
     5768:  260:    return static_cast<size_type>(m_end - m_begin);
     5768:  260-block  0
        -:  261:}
        -:  262:
        -:  263://____________________________________________________________________________//
        -:  264:
        -:  265:template<typename CharT>
        -:  266:inline bool
      843:  267:basic_cstring<CharT>::is_empty() const
        -:  268:{
      843:  269:    return m_end == m_begin;
      843:  269-block  0
        -:  270:}
        -:  271:
        -:  272://____________________________________________________________________________//
        -:  273:
        -:  274:template<typename CharT>
        -:  275:inline bool
      373:  276:basic_cstring<CharT>::empty() const
        -:  277:{
      373:  278:    return is_empty();
      373:  278-block  0
        -:  279:}
        -:  280:
        -:  281://____________________________________________________________________________//
        -:  282:
        -:  283:template<typename CharT>
        -:  284:inline void
       57:  285:basic_cstring<CharT>::clear()
        -:  286:{
       57:  287:    m_begin = m_end;
       57:  288:}
        -:  289:
        -:  290://____________________________________________________________________________//
        -:  291:
        -:  292:template<typename CharT>
        -:  293:inline void
        -:  294:basic_cstring<CharT>::resize( size_type new_len )
        -:  295:{
        -:  296:    if( m_begin + new_len < m_end )
        -:  297:        m_end = m_begin + new_len;
        -:  298:}
        -:  299:
        -:  300://____________________________________________________________________________//
        -:  301:
        -:  302:template<typename CharT>
        -:  303:inline basic_cstring<CharT>&
       15:  304:basic_cstring<CharT>::trim_left( size_type trim_size )
        -:  305:{
       15:  306:    m_begin += trim_size;
       15:  307:    if( m_end <= m_begin )
       15:  307-block  0
    #####:  308:        clear();
    %%%%%:  308-block  0
        -:  309:
       15:  310:    return *this;
       15:  310-block  0
        -:  311:}
        -:  312:
        -:  313://____________________________________________________________________________//
        -:  314:
        -:  315:template<typename CharT>
        -:  316:inline basic_cstring<CharT>&
       76:  317:basic_cstring<CharT>::trim_left( iterator it )
        -:  318:{
       76:  319:    m_begin = it;
       76:  320:    if( m_end <= m_begin )
       76:  320-block  0
       17:  321:        clear();
       17:  321-block  0
        -:  322:
       76:  323:    return *this;
       76:  323-block  0
        -:  324:}
        -:  325:
        -:  326://____________________________________________________________________________//
        -:  327:
        -:  328:template<typename CharT>
        -:  329:inline basic_cstring<CharT>&
       75:  330:basic_cstring<CharT>::trim_left( basic_cstring exclusions )
        -:  331:{
       75:  332:    if( exclusions.is_empty() )
       75:  332-block  0
       73:  333:        exclusions = default_trim_ex();
       73:  333-block  0
        -:  334:
        -:  335:    iterator it;
       92:  336:    for( it = begin(); it != end(); ++it ) {
       75:  336-block  0
       92:  336-block  1
       17:  336-block  2
       75:  337:        if( traits_type::find( exclusions.begin(), exclusions.size(), *it ) == reinterpret_cast<pointer>(0) )
       75:  337-block  0
       58:  338:            break;
       58:  338-block  0
        -:  339:    }
        -:  340:
       75:  341:    return trim_left( it );
       75:  341-block  0
        -:  342:}
        -:  343:
        -:  344://____________________________________________________________________________//
        -:  345:
        -:  346:template<typename CharT>
        -:  347:inline basic_cstring<CharT>&
        -:  348:basic_cstring<CharT>::trim_right( size_type trim_size )
        -:  349:{
        -:  350:    m_end  -= trim_size;
        -:  351:    if( m_end <= m_begin )
        -:  352:        clear();
        -:  353:
        -:  354:    return *this;
        -:  355:}
        -:  356:
        -:  357://____________________________________________________________________________//
        -:  358:
        -:  359:template<typename CharT>
        -:  360:inline basic_cstring<CharT>&
       75:  361:basic_cstring<CharT>::trim_right( iterator it )
        -:  362:{
       75:  363:    m_end = it;
       75:  364:    if( m_end <= m_begin )
       75:  364-block  0
       17:  365:        clear();
       17:  365-block  0
        -:  366:
       75:  367:    return *this;
       75:  367-block  0
        -:  368:}
        -:  369:
        -:  370://____________________________________________________________________________//
        -:  371:
        -:  372:template<typename CharT>
        -:  373:inline basic_cstring<CharT>&
       75:  374:basic_cstring<CharT>::trim_right( basic_cstring exclusions )
        -:  375:{
       75:  376:    if( exclusions.is_empty() )
       75:  376-block  0
       73:  377:        exclusions = default_trim_ex();
       73:  377-block  0
        -:  378:
        -:  379:    iterator it;
        -:  380:
      75*:  381:    for( it = end()-1; it != begin()-1; --it ) {
       75:  381-block  0
       75:  381-block  1
    %%%%%:  381-block  2
       58:  382:        if( self_type::traits_type::find( exclusions.begin(),  exclusions.size(), *it ) == reinterpret_cast<pointer>(0) )
       58:  382-block  0
       58:  383:            break;
       58:  383-block  0
        -:  384:    }
        -:  385:
       75:  386:    return trim_right( it+1 );
       75:  386-block  0
        -:  387:}
        -:  388:
        -:  389://____________________________________________________________________________//
        -:  390:
        -:  391:template<typename CharT>
        -:  392:inline basic_cstring<CharT>&
       75:  393:basic_cstring<CharT>::trim( basic_cstring exclusions )
        -:  394:{
       75:  395:    trim_left( exclusions );
       75:  395-block  0
    $$$$$:  395-block  1
       75:  396:    trim_right( exclusions );
       75:  396-block  0
        -:  397:
       75:  398:    return *this;
       75:  398-block  0
       75:  398-block  1
        -:  399:}
        -:  400:
        -:  401://____________________________________________________________________________//
        -:  402:
        -:  403:template<typename CharT>
        -:  404:inline basic_cstring<CharT>&
      330:  405:basic_cstring<CharT>::operator=( basic_cstring<CharT> const& s )
        -:  406:{
      330:  407:    m_begin = s.m_begin;
      330:  408:    m_end   = s.m_end;
        -:  409:
      330:  410:    return *this;
      330:  410-block  0
        -:  411:}
        -:  412:
        -:  413://____________________________________________________________________________//
        -:  414:
        -:  415:template<typename CharT>
        -:  416:inline basic_cstring<CharT>&
        -:  417:basic_cstring<CharT>::operator=( std_string const& s )
        -:  418:{
        -:  419:    return *this = self_type( s );
        -:  420:}
        -:  421:
        -:  422://____________________________________________________________________________//
        -:  423:
        -:  424:template<typename CharT>
        -:  425:inline basic_cstring<CharT>&
        1:  426:basic_cstring<CharT>::operator=( pointer s )
        -:  427:{
        1:  428:    return *this = self_type( s );
        1:  428-block  0
        -:  429:}
        -:  430:
        -:  431://____________________________________________________________________________//
        -:  432:
        -:  433:template<typename CharT>
        -:  434:inline basic_cstring<CharT>&
        -:  435:basic_cstring<CharT>::assign( std_string const& s )
        -:  436:{
        -:  437:    return *this = self_type( s );
        -:  438:}
        -:  439:
        -:  440://____________________________________________________________________________//
        -:  441:
        -:  442:template<typename CharT>
        -:  443:inline basic_cstring<CharT>&
        -:  444:basic_cstring<CharT>::assign( pointer s )
        -:  445:{
        -:  446:    return *this = self_type( s );
        -:  447:}
        -:  448:
        -:  449://____________________________________________________________________________//
        -:  450:
        -:  451:template<typename CharT>
        -:  452:inline basic_cstring<CharT>&
       32:  453:basic_cstring<CharT>::assign( pointer f, pointer l )
        -:  454:{
       32:  455:    return *this = self_type( f, l );
       32:  455-block  0
        -:  456:}
        -:  457:
        -:  458://____________________________________________________________________________//
        -:  459:
        -:  460:template<typename CharT>
        -:  461:inline void
        -:  462:basic_cstring<CharT>::swap( basic_cstring<CharT>& s )
        -:  463:{
        -:  464:    // do not want to include alogrithm
        -:  465:    pointer tmp1    = m_begin;
        -:  466:    pointer tmp2    = m_end;
        -:  467:
        -:  468:    m_begin         = s.m_begin;
        -:  469:    m_end           = s.m_end;
        -:  470:
        -:  471:    s.m_begin       = tmp1;
        -:  472:    s.m_end         = tmp2;
        -:  473:}
        -:  474:
        -:  475://____________________________________________________________________________//
        -:  476:
        -:  477:template<typename CharT>
        -:  478:inline typename basic_cstring<CharT>::iterator
     1309:  479:basic_cstring<CharT>::begin()
        -:  480:{
     1309:  481:    return m_begin;
     1309:  481-block  0
        -:  482:}
        -:  483:
        -:  484://____________________________________________________________________________//
        -:  485:
        -:  486:template<typename CharT>
        -:  487:inline typename basic_cstring<CharT>::const_iterator
     1576:  488:basic_cstring<CharT>::begin() const
        -:  489:{
     1576:  490:    return m_begin;
     1576:  490-block  0
        -:  491:}
        -:  492:
        -:  493://____________________________________________________________________________//
        -:  494:
        -:  495:template<typename CharT>
        -:  496:inline typename basic_cstring<CharT>::iterator
      769:  497:basic_cstring<CharT>::end()
        -:  498:{
      769:  499:    return m_end;
      769:  499-block  0
        -:  500:}
        -:  501:
        -:  502://____________________________________________________________________________//
        -:  503:
        -:  504:template<typename CharT>
        -:  505:inline typename basic_cstring<CharT>::const_iterator
      378:  506:basic_cstring<CharT>::end() const
        -:  507:{
      378:  508:    return m_end;
      378:  508-block  0
        -:  509:}
        -:  510:
        -:  511://____________________________________________________________________________//
        -:  512:
        -:  513:template<typename CharT>
        -:  514:inline typename basic_cstring<CharT>::size_type
    #####:  515:basic_cstring<CharT>::find( basic_cstring<CharT> str ) const
        -:  516:{
    #####:  517:    if( str.is_empty() || str.size() > size() )
    %%%%%:  517-block  0
    %%%%%:  517-block  1
    %%%%%:  517-block  2
    %%%%%:  517-block  3
    %%%%%:  517-block  4
    #####:  518:        return static_cast<size_type>(npos);
    %%%%%:  518-block  0
        -:  519:
    #####:  520:    const_iterator it   = begin();
    %%%%%:  520-block  0
    #####:  521:    const_iterator last = end() - str.size() + 1;
        -:  522:
    #####:  523:    while( it != last ) {
    %%%%%:  523-block  0
    #####:  524:        if( traits_type::compare( it, str.begin(), str.size() ) == 0 )
    %%%%%:  524-block  0
    #####:  525:            break;
    %%%%%:  525-block  0
        -:  526:
    #####:  527:        ++it;
    %%%%%:  527-block  0
        -:  528:    }
        -:  529:
    #####:  530:    return it == last ? npos : static_cast<size_type>(it - begin());
    %%%%%:  530-block  0
    %%%%%:  530-block  1
    %%%%%:  530-block  2
    %%%%%:  530-block  3
        -:  531:}
        -:  532:
        -:  533://____________________________________________________________________________//
        -:  534:
        -:  535:template<typename CharT>
        -:  536:inline typename basic_cstring<CharT>::size_type
        -:  537:basic_cstring<CharT>::rfind( basic_cstring<CharT> str ) const
        -:  538:{
        -:  539:    if( str.is_empty() || str.size() > size() )
        -:  540:        return static_cast<size_type>(npos);
        -:  541:
        -:  542:    const_iterator it   = end() - str.size();
        -:  543:    const_iterator last = begin()-1;
        -:  544:
        -:  545:    while( it != last ) {
        -:  546:        if( traits_type::compare( it, str.begin(), str.size() ) == 0 )
        -:  547:            break;
        -:  548:
        -:  549:        --it;
        -:  550:    }
        -:  551:
        -:  552:    return it == last ? static_cast<size_type>(npos) : static_cast<size_type>(it - begin());
        -:  553:}
        -:  554:
        -:  555://____________________________________________________________________________//
        -:  556:
        -:  557:template<typename CharT>
        -:  558:inline basic_cstring<CharT>
        5:  559:basic_cstring<CharT>::substr( size_type beg_index, size_type end_index ) const
        -:  560:{
        5:  561:    return beg_index > size()
        5:  561-block  0
        -:  562:            ?       self_type()
        5:  563:            : end_index > size()
        5:  563-block  0
    #####:  564:                ?   self_type( m_begin + beg_index, m_end )
      10*:  565:                :   self_type( m_begin + beg_index, m_begin + end_index );
    %%%%%:  565-block  0
    %%%%%:  565-block  1
        5:  565-block  2
        5:  565-block  3
        -:  566:}
        -:  567:
        -:  568://____________________________________________________________________________//
        -:  569:
        -:  570:template<typename CharT>
        -:  571:inline basic_cstring<CharT>
      146:  572:basic_cstring<CharT>::default_trim_ex()
        -:  573:{
        -:  574:    static CharT ws[3] = { CharT(' '), CharT('\t'), CharT('\n') }; // !! wide case
        -:  575:
      146:  576:    return self_type( ws, 3 );
      146:  576-block  0
        -:  577:}
        -:  578:
        -:  579://____________________________________________________________________________//
        -:  580:
        -:  581:// ************************************************************************** //
        -:  582:// **************             comparison operators             ************** //
        -:  583:// ************************************************************************** //
        -:  584:
        -:  585:template<typename CharT1,typename CharT2>
        -:  586:inline bool
       17:  587:operator==( basic_cstring<CharT1> const& s1, basic_cstring<CharT2> const& s2 )
        -:  588:{
        -:  589:    typedef typename basic_cstring<CharT1>::traits_type traits_type;
       33:  590:    return s1.size() == s2.size() &&
       17:  590-block  0
       10:  590-block  1
        7:  590-block  2
       33:  591:               traits_type::compare( s1.begin(), s2.begin(), s1.size() ) == 0;
       16:  591-block  0
       17:  591-block  1
        -:  592:}
        -:  593:
        -:  594://____________________________________________________________________________//
        -:  595:
        -:  596:template<typename CharT1,typename CharT2>
        -:  597:inline bool
        4:  598:operator==( basic_cstring<CharT1> const& s1, CharT2* s2 )
        -:  599:{
        -:  600:#if !defined(__DMC__)
        4:  601:    return s1 == basic_cstring<CharT2>( s2 );
        4:  601-block  0
        4:  601-block  1
        4:  601-block  2
        4:  601-block  3
        -:  602:#else
        -:  603:    return s1 == basic_cstring<CharT2 const>( s2 );
        -:  604:#endif
        -:  605:}
        -:  606:
        -:  607://____________________________________________________________________________//
        -:  608:
        -:  609:template<typename CharT>
        -:  610:inline bool
       11:  611:operator==( basic_cstring<CharT> const& s1, typename basic_cstring<CharT>::std_string const& s2 )
        -:  612:{
       11:  613:    return s1 == basic_cstring<CharT>( s2 );
       11:  613-block  0
       11:  613-block  1
       11:  613-block  2
       11:  613-block  3
        -:  614:}
        -:  615:
        -:  616://____________________________________________________________________________//
        -:  617:
        -:  618:template<typename CharT1,typename CharT2>
        -:  619:inline bool
        -:  620:operator==( CharT1* s2, basic_cstring<CharT2> const& s1 )
        -:  621:{
        -:  622:    return s1 == s2;
        -:  623:}
        -:  624:
        -:  625://____________________________________________________________________________//
        -:  626:
        -:  627:template<typename CharT>
        -:  628:inline bool
        5:  629:operator==( typename basic_cstring<CharT>::std_string const& s2, basic_cstring<CharT> const& s1 )
        -:  630:{
        5:  631:    return s1 == s2;
        5:  631-block  0
        -:  632:}
        -:  633:
        -:  634://____________________________________________________________________________//
        -:  635:
        -:  636:template<typename CharT>
        -:  637:inline bool
        -:  638:operator!=( basic_cstring<CharT> const& s1, CharT* s2 )
        -:  639:{
        -:  640:    return !(s1 == s2);
        -:  641:}
        -:  642:
        -:  643://____________________________________________________________________________//
        -:  644:
        -:  645:template<typename CharT>
        -:  646:inline bool
        -:  647:operator!=( CharT* s2, basic_cstring<CharT> const& s1 )
        -:  648:{
        -:  649:    return !(s1 == s2);
        -:  650:}
        -:  651:
        -:  652://____________________________________________________________________________//
        -:  653:
        -:  654:template<typename CharT>
        -:  655:inline bool
    #####:  656:operator!=( basic_cstring<CharT> const& s1, basic_cstring<CharT> const& s2 )
        -:  657:{
    #####:  658:    return !(s1 == s2);
    %%%%%:  658-block  0
        -:  659:}
        -:  660:
        -:  661://____________________________________________________________________________//
        -:  662:
        -:  663:template<typename CharT>
        -:  664:inline bool
        -:  665:operator!=( basic_cstring<CharT> const& s1, typename basic_cstring<CharT>::std_string const& s2 )
        -:  666:{
        -:  667:    return !(s1 == s2);
        -:  668:}
        -:  669:
        -:  670://____________________________________________________________________________//
        -:  671:
        -:  672:template<typename CharT>
        -:  673:inline bool
        -:  674:operator!=( typename basic_cstring<CharT>::std_string const& s2, basic_cstring<CharT> const& s1 )
        -:  675:{
        -:  676:    return !(s1 == s2);
        -:  677:}
        -:  678:
        -:  679://____________________________________________________________________________//
        -:  680:
        -:  681:// ************************************************************************** //
        -:  682:// **************                  first_char                  ************** //
        -:  683:// ************************************************************************** //
        -:  684:
        -:  685:template<typename CharT>
        -:  686:inline typename basic_cstring<CharT>::value_ret_type
        2:  687:first_char( basic_cstring<CharT> source )
        -:  688:{
        -:  689:    typedef typename basic_cstring<CharT>::value_ret_type res_type;
        -:  690:
       2*:  691:    return source.is_empty() ? static_cast<res_type>(0) : *source.begin();
        2:  691-block  0
    %%%%%:  691-block  1
        2:  691-block  2
        2:  691-block  3
        -:  692:}
        -:  693:
        -:  694://____________________________________________________________________________//
        -:  695:
        -:  696:// ************************************************************************** //
        -:  697:// **************                  last_char                   ************** //
        -:  698:// ************************************************************************** //
        -:  699:
        -:  700:template<typename CharT>
        -:  701:inline typename basic_cstring<CharT>::value_ret_type
        1:  702:last_char( basic_cstring<CharT> source )
        -:  703:{
        -:  704:    typedef typename basic_cstring<CharT>::value_ret_type res_type;
        -:  705:
       1*:  706:    return source.is_empty() ? static_cast<res_type>(0) : *(source.end()-1);
        1:  706-block  0
    %%%%%:  706-block  1
        1:  706-block  2
        1:  706-block  3
        -:  707:}
        -:  708:
        -:  709://____________________________________________________________________________//
        -:  710:
        -:  711:// ************************************************************************** //
        -:  712:// **************                  assign_op                   ************** //
        -:  713:// ************************************************************************** //
        -:  714:
        -:  715:template<typename CharT1, typename CharT2>
        -:  716:inline void
      255:  717:assign_op( std::basic_string<CharT1>& target, basic_cstring<CharT2> src, int )
        -:  718:{
      255:  719:    target.assign( src.begin(), src.size() );
      255:  719-block  0
      255:  720:}
        -:  721:
        -:  722://____________________________________________________________________________//
        -:  723:
        -:  724:template<typename CharT1, typename CharT2>
        -:  725:inline std::basic_string<CharT1>&
    #####:  726:operator+=( std::basic_string<CharT1>& target, basic_cstring<CharT2> const& str )
        -:  727:{
    #####:  728:    target.append( str.begin(), str.end() );
    %%%%%:  728-block  0
    #####:  729:    return target;
        -:  730:}
        -:  731:
        -:  732://____________________________________________________________________________//
        -:  733:
        -:  734:template<typename CharT1, typename CharT2>
        -:  735:inline std::basic_string<CharT1>
    #####:  736:operator+( std::basic_string<CharT1> const& lhs, basic_cstring<CharT2> const& rhs )
        -:  737:{
    #####:  738:    std::basic_string<CharT1> res( lhs );
    %%%%%:  738-block  0
        -:  739:
    #####:  740:    res.append( rhs.begin(), rhs.end() );
    #####:  741:    return res;
    %%%%%:  741-block  0
    %%%%%:  741-block  1
        -:  742:}
        -:  743:
        -:  744://____________________________________________________________________________//
        -:  745:
        -:  746:} // namespace unit_test
        -:  747:
        -:  748:} // namespace boost
        -:  749:
        -:  750://____________________________________________________________________________//
        -:  751:
        -:  752:#include <boost/test/detail/enable_warnings.hpp>
        -:  753:
        -:  754:#endif // BOOST_TEST_UTILS_BASIC_CSTRING_HPP
